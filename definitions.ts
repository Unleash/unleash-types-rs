/*
 Generated by typeshare 1.0.0
*/

export interface Query {
	tags?: string[][];
	projects?: string[];
	namePrefix?: string;
	environment?: string;
	inlineSegmentConstraints?: boolean;
}

export interface Context {
	userId?: string;
	sessionId?: string;
	environment?: string;
	appName?: string;
	currentTime?: string;
	remoteAddress?: string;
	properties?: Record<string, string>;
}

export interface Constraint {
	contextName: string;
	operator: Operator;
	caseInsensitive?: boolean;
	inverted?: boolean;
	values?: string[];
	value?: string;
}

export interface Strategy {
	name: string;
	sortOrder?: number;
	segments?: number[];
	constraints?: Constraint[];
	parameters?: Record<string, string>;
}

export interface Override {
	contextName: string;
	values: string[];
}

export interface Payload {
	type: string;
	value: string;
}

export interface Variant {
	name: string;
	weight: number;
	weightType?: WeightType;
	stickiness?: string;
	payload?: Payload;
	overrides?: Override[];
}

export interface Segment {
	id: number;
	constraints: Constraint[];
}

export interface ClientFeature {
	name: string;
	type?: string;
	description?: string;
	createdAt?: Date;
	lastSeenAt?: Date;
	enabled: boolean;
	stale?: boolean;
	impressionData?: boolean;
	project?: string;
	strategies?: Strategy[];
	variants?: Variant[];
}

export interface ClientFeatures {
	version: number;
	features: ClientFeature[];
	segments?: Segment[];
	query?: Query;
}

export interface ToggleStats {
	no: number;
	yes: number;
	variants?: Record<string, number>;
}

export interface MetricBucket {
	start: Date;
	stop: Date;
	toggles: Record<string, ToggleStats>;
}

export interface ClientMetrics {
	appName: string;
	bucket: MetricBucket;
	environment?: string;
	instanceId?: string;
}

export interface ClientMetricsEnv {
	featureName: string;
	appName: string;
	environment: string;
	timestamp: Date;
	yes: number;
	no: number;
	variants: Record<string, number>;
}

export interface ConnectVia {
	appName: string;
	instanceId: string;
}

export interface ClientApplication {
	appName: string;
	connectVia?: ConnectVia[];
	environment?: string;
	instanceId?: string;
	interval: number;
	sdkVersion?: string;
	started: Date;
	strategies: string[];
}

export enum Operator {
	NotIn = "NOT_IN",
	In = "IN",
	StrEndsWith = "STR_ENDS_WITH",
	StrStartsWith = "STR_STARTS_WITH",
	StrContains = "STR_CONTAINS",
	NumEq = "NUM_EQ",
	NumGt = "NUM_GT",
	NumGte = "NUM_GTE",
	NumLt = "NUM_LT",
	NumLte = "NUM_LTE",
	DateAfter = "DATE_AFTER",
	DateBefore = "DATE_BEFORE",
	SemverEq = "SEMVER_EQ",
	SemverLt = "SEMVER_LT",
	SemverGt = "SEMVER_GT",
}

export enum WeightType {
	Fix = "fix",
	Variable = "variable",
}

